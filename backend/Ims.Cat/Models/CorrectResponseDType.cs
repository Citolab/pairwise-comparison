/*
 * Computer Adaptive Testing (CAT) Service OpenAPI (YAML) Definition
 *
 * The Computer Adaptive Testing (CAT) Service enables a standard way of implementing adaptive testing using Question and Test Interoperability (QTI). This service has been described using the IMS Model Driven Specification development approach, this being the Platform Specific Model (PSM) of the service.
 *
 * OpenAPI spec version: 1.0
 * Contact: lmattson@imsglobal.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Ims.Cat.Models
{ 
    /// <summary>
    /// The correct response may be output as part of the report if desired. Systems are not limited to reporting correct responses declared in responseDeclarations. For example, a correct response may be set by a templateRule or may simply have been suppressed from the declaration passed to the delivery engine e.g. for security. 
    /// </summary>
    [DataContract]
    public partial class CorrectResponseDType : IEquatable<CorrectResponseDType>
    { 
        /// <summary>
        /// A human readable interpretation of the correct value. Model Primitive Datatype &#x3D; String.
        /// </summary>
        /// <value>A human readable interpretation of the correct value. Model Primitive Datatype &#x3D; String.</value>
        [DataMember(Name="interpretation")]
        public string Interpretation { get; set; }

        /// <summary>
        /// The order of the values is signficant only when the response is of ordered cardinality. 
        /// </summary>
        /// <value>The order of the values is signficant only when the response is of ordered cardinality. </value>
        [DataMember(Name="value")]
        public List<ValueDType> Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CorrectResponseDType {\n");
            sb.Append("  Interpretation: ").Append(Interpretation).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CorrectResponseDType)obj);
        }

        /// <summary>
        /// Returns true if CorrectResponseDType instances are equal
        /// </summary>
        /// <param name="other">Instance of CorrectResponseDType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CorrectResponseDType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Interpretation == other.Interpretation ||
                    Interpretation != null &&
                    Interpretation.Equals(other.Interpretation)
                ) && 
                (
                    Value == other.Value ||
                    Value != null &&
                    Value.SequenceEqual(other.Value)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Interpretation != null)
                    hashCode = hashCode * 59 + Interpretation.GetHashCode();
                    if (Value != null)
                    hashCode = hashCode * 59 + Value.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CorrectResponseDType left, CorrectResponseDType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CorrectResponseDType left, CorrectResponseDType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
