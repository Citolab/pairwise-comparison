/*
 * Computer Adaptive Testing (CAT) Service OpenAPI (YAML) Definition
 *
 * The Computer Adaptive Testing (CAT) Service enables a standard way of implementing adaptive testing using Question and Test Interoperability (QTI). This service has been described using the IMS Model Driven Specification development approach, this being the Platform Specific Model (PSM) of the service.
 *
 * OpenAPI spec version: 1.0
 * Contact: lmattson@imsglobal.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Ims.Cat.Models
{ 
    /// <summary>
    /// An Assessment Result is used to report the results of a candidate&#x27;s interaction with a test and/or one or more items attempted. Information about the test is optional, in some systems it may be possible to interact with items that are not organized into a test at all. For example, items that are organized with learning resources and presented individually in a formative context. 
    /// </summary>
    [DataContract]
    public partial class AssessmentResultDType : IEquatable<AssessmentResultDType>
    { 
        /// <summary>
        /// Gets or Sets Context
        /// </summary>
        [DataMember(Name="context")]
        public ContextDType Context { get; set; }

        /// <summary>
        /// Gets or Sets TestResult
        /// </summary>
        [DataMember(Name="testResult")]
        public TestResultDType TestResult { get; set; }

        /// <summary>
        /// When a test result is given the following item results must relate only to items that were selected for presentation as part of the corresponding test session. Furthermore, all items selected for presentation should be reported with a corresponding itemResult. 
        /// </summary>
        /// <value>When a test result is given the following item results must relate only to items that were selected for presentation as part of the corresponding test session. Furthermore, all items selected for presentation should be reported with a corresponding itemResult. </value>
        [DataMember(Name="itemResult")]
        public List<ItemResultDType> ItemResult { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssessmentResultDType {\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  TestResult: ").Append(TestResult).Append("\n");
            sb.Append("  ItemResult: ").Append(ItemResult).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AssessmentResultDType)obj);
        }

        /// <summary>
        /// Returns true if AssessmentResultDType instances are equal
        /// </summary>
        /// <param name="other">Instance of AssessmentResultDType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssessmentResultDType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                ) && 
                (
                    TestResult == other.TestResult ||
                    TestResult != null &&
                    TestResult.Equals(other.TestResult)
                ) && 
                (
                    ItemResult == other.ItemResult ||
                    ItemResult != null &&
                    ItemResult.SequenceEqual(other.ItemResult)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                    if (TestResult != null)
                    hashCode = hashCode * 59 + TestResult.GetHashCode();
                    if (ItemResult != null)
                    hashCode = hashCode * 59 + ItemResult.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AssessmentResultDType left, AssessmentResultDType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AssessmentResultDType left, AssessmentResultDType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
