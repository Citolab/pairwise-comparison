/*
 * Computer Adaptive Testing (CAT) Service OpenAPI (YAML) Definition
 *
 * The Computer Adaptive Testing (CAT) Service enables a standard way of implementing adaptive testing using Question and Test Interoperability (QTI). This service has been described using the IMS Model Driven Specification development approach, this being the Platform Specific Model (PSM) of the service.
 *
 * OpenAPI spec version: 1.0
 * Contact: lmattson@imsglobal.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Ims.Cat.Models
{ 
    /// <summary>
    /// The container for the Test result. When a test result is given the following item results must relate only to items that were selected for presentation as part of the corresponding test session. Furthermore, all items selected for presentation should be reported with a corresponding itemResult. 
    /// </summary>
    [DataContract]
    public partial class TestResultDType : IEquatable<TestResultDType>
    { 
        /// <summary>
        /// The identifier of the test for which this is a result. Model Primitive Datatype &#x3D; NCName.
        /// </summary>
        /// <value>The identifier of the test for which this is a result. Model Primitive Datatype &#x3D; NCName.</value>
        [Required]
        [DataMember(Name="identifier")]
        public string Identifier { get; set; }

        /// <summary>
        /// The date stamp of when this result was recorded. Model Primitive Datatype &#x3D; DateTime.
        /// </summary>
        /// <value>The date stamp of when this result was recorded. Model Primitive Datatype &#x3D; DateTime.</value>
        [Required]
        [DataMember(Name="datestamp")]
        public DateTime? Datestamp { get; set; }

        /// <summary>
        /// Indicates that a Response Variable is being reported. This is the value of one of the responses associated with an Item in the corresponding ASI instance [QTI, 20a]. 
        /// </summary>
        /// <value>Indicates that a Response Variable is being reported. This is the value of one of the responses associated with an Item in the corresponding ASI instance [QTI, 20a]. </value>
        [DataMember(Name="responseVariables")]
        public List<ResponseVariableDType> ResponseVariables { get; set; }

        /// <summary>
        /// Indicates that a Template Variable is being reported. This is the value of one of the template variables associated with an Item in the corresponding ASI instance [QTI, 20a]. 
        /// </summary>
        /// <value>Indicates that a Template Variable is being reported. This is the value of one of the template variables associated with an Item in the corresponding ASI instance [QTI, 20a]. </value>
        [DataMember(Name="templateVariables")]
        public List<TemplateVariableDType> TemplateVariables { get; set; }

        /// <summary>
        /// Indicates that an Outcome Variable is being reported. This is the value of one of the outcomes associated with either an Item or Test and defined in the corresponding ASI instance [QTI, 20a]. 
        /// </summary>
        /// <value>Indicates that an Outcome Variable is being reported. This is the value of one of the outcomes associated with either an Item or Test and defined in the corresponding ASI instance [QTI, 20a]. </value>
        [DataMember(Name="outcomeVariables")]
        public List<OutcomeVariableDType> OutcomeVariables { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TestResultDType {\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  Datestamp: ").Append(Datestamp).Append("\n");
            sb.Append("  ResponseVariables: ").Append(ResponseVariables).Append("\n");
            sb.Append("  TemplateVariables: ").Append(TemplateVariables).Append("\n");
            sb.Append("  OutcomeVariables: ").Append(OutcomeVariables).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TestResultDType)obj);
        }

        /// <summary>
        /// Returns true if TestResultDType instances are equal
        /// </summary>
        /// <param name="other">Instance of TestResultDType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TestResultDType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Identifier == other.Identifier ||
                    Identifier != null &&
                    Identifier.Equals(other.Identifier)
                ) && 
                (
                    Datestamp == other.Datestamp ||
                    Datestamp != null &&
                    Datestamp.Equals(other.Datestamp)
                ) && 
                (
                    ResponseVariables == other.ResponseVariables ||
                    ResponseVariables != null &&
                    ResponseVariables.SequenceEqual(other.ResponseVariables)
                ) && 
                (
                    TemplateVariables == other.TemplateVariables ||
                    TemplateVariables != null &&
                    TemplateVariables.SequenceEqual(other.TemplateVariables)
                ) && 
                (
                    OutcomeVariables == other.OutcomeVariables ||
                    OutcomeVariables != null &&
                    OutcomeVariables.SequenceEqual(other.OutcomeVariables)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Identifier != null)
                    hashCode = hashCode * 59 + Identifier.GetHashCode();
                    if (Datestamp != null)
                    hashCode = hashCode * 59 + Datestamp.GetHashCode();
                    if (ResponseVariables != null)
                    hashCode = hashCode * 59 + ResponseVariables.GetHashCode();
                    if (TemplateVariables != null)
                    hashCode = hashCode * 59 + TemplateVariables.GetHashCode();
                    if (OutcomeVariables != null)
                    hashCode = hashCode * 59 + OutcomeVariables.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TestResultDType left, TestResultDType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TestResultDType left, TestResultDType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
