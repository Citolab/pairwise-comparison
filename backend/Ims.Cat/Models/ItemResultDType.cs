/*
 * Computer Adaptive Testing (CAT) Service OpenAPI (YAML) Definition
 *
 * The Computer Adaptive Testing (CAT) Service enables a standard way of implementing adaptive testing using Question and Test Interoperability (QTI). This service has been described using the IMS Model Driven Specification development approach, this being the Platform Specific Model (PSM) of the service.
 *
 * OpenAPI spec version: 1.0
 * Contact: lmattson@imsglobal.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Ims.Cat.Models
{ 
    /// <summary>
    /// The result of an item session is reported with an itemResult. A report may contain multiple results for the same instance of an item representing multiple attempts, progression through an adaptive item or even more detailed tracking. In these cases, each item result must have a different datestamp. 
    /// </summary>
    [DataContract]
    public partial class ItemResultDType : IEquatable<ItemResultDType>
    { 
        /// <summary>
        /// The identifier of the item for which this is a result. For item results that are reported as part of a test result this is the identifier used to refer to the item in the test (see assessmentItemRef). For item results that are reported on their own, this can be any suitable identifier for the item. Where possible, the value should match the identifier attribute on the associated assessmentItem. Model Primitive Datatype &#x3D; NCName.
        /// </summary>
        /// <value>The identifier of the item for which this is a result. For item results that are reported as part of a test result this is the identifier used to refer to the item in the test (see assessmentItemRef). For item results that are reported on their own, this can be any suitable identifier for the item. Where possible, the value should match the identifier attribute on the associated assessmentItem. Model Primitive Datatype &#x3D; NCName.</value>
        [Required]
        [DataMember(Name="identifier")]
        public string Identifier { get; set; }

        /// <summary>
        /// For item results that are reported as part of a test, this attribute must be used to indicate the position of the item within the specific instance of the test. The first item of the first part of the test is defined to have sequence index 1. Model Primitive Datatype &#x3D; NonNegativeInteger.
        /// </summary>
        /// <value>For item results that are reported as part of a test, this attribute must be used to indicate the position of the item within the specific instance of the test. The first item of the first part of the test is defined to have sequence index 1. Model Primitive Datatype &#x3D; NonNegativeInteger.</value>
        [DataMember(Name="sequenceIndex")]
        public int? SequenceIndex { get; set; }

        /// <summary>
        /// The date stamp of when this result was recorded. Model Primitive Datatype &#x3D; DateTime.
        /// </summary>
        /// <value>The date stamp of when this result was recorded. Model Primitive Datatype &#x3D; DateTime.</value>
        [Required]
        [DataMember(Name="datestamp")]
        public DateTime? Datestamp { get; set; }

        /// <summary>
        /// The session status is used to interpret the values of the item variables. See the sessionStatus vocabulary. 
        /// </summary>
        /// <value>The session status is used to interpret the values of the item variables. See the sessionStatus vocabulary. </value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum SessionStatusEnum
        {
            /// <summary>
            /// Enum FinalEnum for final
            /// </summary>
            [EnumMember(Value = "final")]
            FinalEnum = 0,
            /// <summary>
            /// Enum InitialEnum for initial
            /// </summary>
            [EnumMember(Value = "initial")]
            InitialEnum = 1,
            /// <summary>
            /// Enum PendingResponseProcessingEnum for pendingResponseProcessing
            /// </summary>
            [EnumMember(Value = "pendingResponseProcessing")]
            PendingResponseProcessingEnum = 2,
            /// <summary>
            /// Enum PendingSubmissionEnum for pendingSubmission
            /// </summary>
            [EnumMember(Value = "pendingSubmission")]
            PendingSubmissionEnum = 3        }

        /// <summary>
        /// The session status is used to interpret the values of the item variables. See the sessionStatus vocabulary. 
        /// </summary>
        /// <value>The session status is used to interpret the values of the item variables. See the sessionStatus vocabulary. </value>
        [Required]
        [DataMember(Name="sessionStatus")]
        public SessionStatusEnum? SessionStatus { get; set; }

        /// <summary>
        /// Indicates that a Response Variable is being reported. This is the value of one of the responses associated with an Item in the corresponding ASI instance. 
        /// </summary>
        /// <value>Indicates that a Response Variable is being reported. This is the value of one of the responses associated with an Item in the corresponding ASI instance. </value>
        [DataMember(Name="responseVariables")]
        public List<ResponseVariableDType> ResponseVariables { get; set; }

        /// <summary>
        /// Indicates that a Template Variable is being reported. This is the value of one of the template variables associated with an Item in the corresponding ASI instance. 
        /// </summary>
        /// <value>Indicates that a Template Variable is being reported. This is the value of one of the template variables associated with an Item in the corresponding ASI instance. </value>
        [DataMember(Name="templateVariables")]
        public List<TemplateVariableDType> TemplateVariables { get; set; }

        /// <summary>
        /// Indicates that an Outcome Variable is being reported. This is the value of one of the outcomes associated with either an Item or Test and defined in the corresponding ASI instance. 
        /// </summary>
        /// <value>Indicates that an Outcome Variable is being reported. This is the value of one of the outcomes associated with either an Item or Test and defined in the corresponding ASI instance. </value>
        [DataMember(Name="outcomeVariables")]
        public List<OutcomeVariableDType> OutcomeVariables { get; set; }

        /// <summary>
        /// An optional comment supplied by the candidate (see the allowComment in the ASI documentation [QTI, 20a]). Model Primitive Datatype &#x3D; String.
        /// </summary>
        /// <value>An optional comment supplied by the candidate (see the allowComment in the ASI documentation [QTI, 20a]). Model Primitive Datatype &#x3D; String.</value>
        [DataMember(Name="candidateComment")]
        public string CandidateComment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemResultDType {\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  SequenceIndex: ").Append(SequenceIndex).Append("\n");
            sb.Append("  Datestamp: ").Append(Datestamp).Append("\n");
            sb.Append("  SessionStatus: ").Append(SessionStatus).Append("\n");
            sb.Append("  ResponseVariables: ").Append(ResponseVariables).Append("\n");
            sb.Append("  TemplateVariables: ").Append(TemplateVariables).Append("\n");
            sb.Append("  OutcomeVariables: ").Append(OutcomeVariables).Append("\n");
            sb.Append("  CandidateComment: ").Append(CandidateComment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ItemResultDType)obj);
        }

        /// <summary>
        /// Returns true if ItemResultDType instances are equal
        /// </summary>
        /// <param name="other">Instance of ItemResultDType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemResultDType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Identifier == other.Identifier ||
                    Identifier != null &&
                    Identifier.Equals(other.Identifier)
                ) && 
                (
                    SequenceIndex == other.SequenceIndex ||
                    SequenceIndex != null &&
                    SequenceIndex.Equals(other.SequenceIndex)
                ) && 
                (
                    Datestamp == other.Datestamp ||
                    Datestamp != null &&
                    Datestamp.Equals(other.Datestamp)
                ) && 
                (
                    SessionStatus == other.SessionStatus ||
                    SessionStatus != null &&
                    SessionStatus.Equals(other.SessionStatus)
                ) && 
                (
                    ResponseVariables == other.ResponseVariables ||
                    ResponseVariables != null &&
                    ResponseVariables.SequenceEqual(other.ResponseVariables)
                ) && 
                (
                    TemplateVariables == other.TemplateVariables ||
                    TemplateVariables != null &&
                    TemplateVariables.SequenceEqual(other.TemplateVariables)
                ) && 
                (
                    OutcomeVariables == other.OutcomeVariables ||
                    OutcomeVariables != null &&
                    OutcomeVariables.SequenceEqual(other.OutcomeVariables)
                ) && 
                (
                    CandidateComment == other.CandidateComment ||
                    CandidateComment != null &&
                    CandidateComment.Equals(other.CandidateComment)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Identifier != null)
                    hashCode = hashCode * 59 + Identifier.GetHashCode();
                    if (SequenceIndex != null)
                    hashCode = hashCode * 59 + SequenceIndex.GetHashCode();
                    if (Datestamp != null)
                    hashCode = hashCode * 59 + Datestamp.GetHashCode();
                    if (SessionStatus != null)
                    hashCode = hashCode * 59 + SessionStatus.GetHashCode();
                    if (ResponseVariables != null)
                    hashCode = hashCode * 59 + ResponseVariables.GetHashCode();
                    if (TemplateVariables != null)
                    hashCode = hashCode * 59 + TemplateVariables.GetHashCode();
                    if (OutcomeVariables != null)
                    hashCode = hashCode * 59 + OutcomeVariables.GetHashCode();
                    if (CandidateComment != null)
                    hashCode = hashCode * 59 + CandidateComment.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ItemResultDType left, ItemResultDType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ItemResultDType left, ItemResultDType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
