/*
 * Computer Adaptive Testing (CAT) Service OpenAPI (YAML) Definition
 *
 * The Computer Adaptive Testing (CAT) Service enables a standard way of implementing adaptive testing using Question and Test Interoperability (QTI). This service has been described using the IMS Model Driven Specification development approach, this being the Platform Specific Model (PSM) of the service.
 *
 * OpenAPI spec version: 1.0
 * Contact: lmattson@imsglobal.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Ims.Cat.Models
{ 
    /// <summary>
    /// The container for the definition of the Section that is to be created in the CAT Engine. A Section is aligned to a QTI AssessmentSection [QTI, 20a]. 
    /// </summary>
    [DataContract]
    public partial class SectionDType : IEquatable<SectionDType>
    { 
        /// <summary>
        /// Gets or Sets QtiMetadata
        /// </summary>
        [DataMember(Name="qtiMetadata")]
        public QTIMetadataDType QtiMetadata { get; set; }

        /// <summary>
        /// This is the Base64 encoded XML conforming to IMS QTI 3.0 Usage Date data model [QTI, 20c]. Model Primitive Datatype &#x3D; String.
        /// </summary>
        /// <value>This is the Base64 encoded XML conforming to IMS QTI 3.0 Usage Date data model [QTI, 20c]. Model Primitive Datatype &#x3D; String.</value>
        [DataMember(Name="qtiUsagedata")]
        public string QtiUsagedata { get; set; }

        /// <summary>
        /// This is the Base64 encoded data containing section configuration, aligned with adaptive engine (black box). This format will be proprietary to each adaptive CAT Engine. Model Primitive Datatype &#x3D; String.
        /// </summary>
        /// <value>This is the Base64 encoded data containing section configuration, aligned with adaptive engine (black box). This format will be proprietary to each adaptive CAT Engine. Model Primitive Datatype &#x3D; String.</value>
        [Required]
        [DataMember(Name="sectionConfiguration")]
        public string SectionConfiguration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SectionDType {\n");
            sb.Append("  QtiMetadata: ").Append(QtiMetadata).Append("\n");
            sb.Append("  QtiUsagedata: ").Append(QtiUsagedata).Append("\n");
            sb.Append("  SectionConfiguration: ").Append(SectionConfiguration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SectionDType)obj);
        }

        /// <summary>
        /// Returns true if SectionDType instances are equal
        /// </summary>
        /// <param name="other">Instance of SectionDType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SectionDType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    QtiMetadata == other.QtiMetadata ||
                    QtiMetadata != null &&
                    QtiMetadata.Equals(other.QtiMetadata)
                ) && 
                (
                    QtiUsagedata == other.QtiUsagedata ||
                    QtiUsagedata != null &&
                    QtiUsagedata.Equals(other.QtiUsagedata)
                ) && 
                (
                    SectionConfiguration == other.SectionConfiguration ||
                    SectionConfiguration != null &&
                    SectionConfiguration.Equals(other.SectionConfiguration)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (QtiMetadata != null)
                    hashCode = hashCode * 59 + QtiMetadata.GetHashCode();
                    if (QtiUsagedata != null)
                    hashCode = hashCode * 59 + QtiUsagedata.GetHashCode();
                    if (SectionConfiguration != null)
                    hashCode = hashCode * 59 + SectionConfiguration.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SectionDType left, SectionDType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SectionDType left, SectionDType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
