/*
 * Computer Adaptive Testing (CAT) Service OpenAPI (YAML) Definition
 *
 * The Computer Adaptive Testing (CAT) Service enables a standard way of implementing adaptive testing using Question and Test Interoperability (QTI). This service has been described using the IMS Model Driven Specification development approach, this being the Platform Specific Model (PSM) of the service.
 *
 * OpenAPI spec version: 1.0
 * Contact: lmattson@imsglobal.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Ims.Cat.Models
{ 
    /// <summary>
    /// The container for the values assigned to the Key/Value pair. 
    /// </summary>
    [DataContract]
    public partial class KeyValuePairDType : IEquatable<KeyValuePairDType>
    { 
        /// <summary>
        /// This is a URI to the definition of the data being supplied in this accompanying key/value pair. This definition should provide a human readable description of the data-type and value space for the value being identified by its key.  Model Primitive Datatype &#x3D; AnyURI.
        /// </summary>
        /// <value>This is a URI to the definition of the data being supplied in this accompanying key/value pair. This definition should provide a human readable description of the data-type and value space for the value being identified by its key.  Model Primitive Datatype &#x3D; AnyURI.</value>
        [DataMember(Name="glossaryURI")]
        public string GlossaryURI { get; set; }

        /// <summary>
        /// The key for the value to be supplied. Model Primitive Datatype &#x3D; String.
        /// </summary>
        /// <value>The key for the value to be supplied. Model Primitive Datatype &#x3D; String.</value>
        [Required]
        [DataMember(Name="key")]
        public string Key { get; set; }

        /// <summary>
        /// The value being supplied. Model Primitive Datatype &#x3D; String.
        /// </summary>
        /// <value>The value being supplied. Model Primitive Datatype &#x3D; String.</value>
        [Required]
        [DataMember(Name="value")]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KeyValuePairDType {\n");
            sb.Append("  GlossaryURI: ").Append(GlossaryURI).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((KeyValuePairDType)obj);
        }

        /// <summary>
        /// Returns true if KeyValuePairDType instances are equal
        /// </summary>
        /// <param name="other">Instance of KeyValuePairDType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KeyValuePairDType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    GlossaryURI == other.GlossaryURI ||
                    GlossaryURI != null &&
                    GlossaryURI.Equals(other.GlossaryURI)
                ) && 
                (
                    Key == other.Key ||
                    Key != null &&
                    Key.Equals(other.Key)
                ) && 
                (
                    Value == other.Value ||
                    Value != null &&
                    Value.Equals(other.Value)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (GlossaryURI != null)
                    hashCode = hashCode * 59 + GlossaryURI.GetHashCode();
                    if (Key != null)
                    hashCode = hashCode * 59 + Key.GetHashCode();
                    if (Value != null)
                    hashCode = hashCode * 59 + Value.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(KeyValuePairDType left, KeyValuePairDType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(KeyValuePairDType left, KeyValuePairDType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
