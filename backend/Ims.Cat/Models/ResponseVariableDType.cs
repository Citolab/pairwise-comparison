/*
 * Computer Adaptive Testing (CAT) Service OpenAPI (YAML) Definition
 *
 * The Computer Adaptive Testing (CAT) Service enables a standard way of implementing adaptive testing using Question and Test Interoperability (QTI). This service has been described using the IMS Model Driven Specification development approach, this being the Platform Specific Model (PSM) of the service.
 *
 * OpenAPI spec version: 1.0
 * Contact: lmattson@imsglobal.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Ims.Cat.Models
{ 
    /// <summary>
    /// The Item result information related to a &#x27;Response Variable&#x27;. 
    /// </summary>
    [DataContract]
    public partial class ResponseVariableDType : IEquatable<ResponseVariableDType>
    { 
        /// <summary>
        /// The identifier of the Response Variable. Model Primitive Datatype &#x3D; NCName.
        /// </summary>
        /// <value>The identifier of the Response Variable. Model Primitive Datatype &#x3D; NCName.</value>
        [Required]
        [DataMember(Name="identifier")]
        public string Identifier { get; set; }

        /// <summary>
        /// The cardinality of the Response Variable, taken from the corresponding declaration or definition. 
        /// </summary>
        /// <value>The cardinality of the Response Variable, taken from the corresponding declaration or definition. </value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CardinalityEnum
        {
            /// <summary>
            /// Enum MultipleEnum for multiple
            /// </summary>
            [EnumMember(Value = "multiple")]
            MultipleEnum = 0,
            /// <summary>
            /// Enum OrderedEnum for ordered
            /// </summary>
            [EnumMember(Value = "ordered")]
            OrderedEnum = 1,
            /// <summary>
            /// Enum RecordEnum for record
            /// </summary>
            [EnumMember(Value = "record")]
            RecordEnum = 2,
            /// <summary>
            /// Enum SingleEnum for single
            /// </summary>
            [EnumMember(Value = "single")]
            SingleEnum = 3        }

        /// <summary>
        /// The cardinality of the Response Variable, taken from the corresponding declaration or definition. 
        /// </summary>
        /// <value>The cardinality of the Response Variable, taken from the corresponding declaration or definition. </value>
        [Required]
        [DataMember(Name="cardinality")]
        public CardinalityEnum? Cardinality { get; set; }

        /// <summary>
        /// The base type of the Response Variable, taken from the corresponding declaration of definition. This value is omitted only for variables with record cardinality. 
        /// </summary>
        /// <value>The base type of the Response Variable, taken from the corresponding declaration of definition. This value is omitted only for variables with record cardinality. </value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum BaseTypeEnum
        {
            /// <summary>
            /// Enum BooleanEnum for boolean
            /// </summary>
            [EnumMember(Value = "boolean")]
            BooleanEnum = 0,
            /// <summary>
            /// Enum DirectedPairEnum for directedPair
            /// </summary>
            [EnumMember(Value = "directedPair")]
            DirectedPairEnum = 1,
            /// <summary>
            /// Enum DurationEnum for duration
            /// </summary>
            [EnumMember(Value = "duration")]
            DurationEnum = 2,
            /// <summary>
            /// Enum FileEnum for file
            /// </summary>
            [EnumMember(Value = "file")]
            FileEnum = 3,
            /// <summary>
            /// Enum FloatEnum for float
            /// </summary>
            [EnumMember(Value = "float")]
            FloatEnum = 4,
            /// <summary>
            /// Enum IdentifierEnum for identifier
            /// </summary>
            [EnumMember(Value = "identifier")]
            IdentifierEnum = 5,
            /// <summary>
            /// Enum IntegerEnum for integer
            /// </summary>
            [EnumMember(Value = "integer")]
            IntegerEnum = 6,
            /// <summary>
            /// Enum PairEnum for pair
            /// </summary>
            [EnumMember(Value = "pair")]
            PairEnum = 7,
            /// <summary>
            /// Enum PointEnum for point
            /// </summary>
            [EnumMember(Value = "point")]
            PointEnum = 8,
            /// <summary>
            /// Enum StringEnum for string
            /// </summary>
            [EnumMember(Value = "string")]
            StringEnum = 9,
            /// <summary>
            /// Enum UriEnum for uri
            /// </summary>
            [EnumMember(Value = "uri")]
            UriEnum = 10        }

        /// <summary>
        /// The base type of the Response Variable, taken from the corresponding declaration of definition. This value is omitted only for variables with record cardinality. 
        /// </summary>
        /// <value>The base type of the Response Variable, taken from the corresponding declaration of definition. This value is omitted only for variables with record cardinality. </value>
        [DataMember(Name="baseType")]
        public BaseTypeEnum? BaseType { get; set; }

        /// <summary>
        /// When a response variable is bound to an interaction that supports the shuffling of choices, the sequence of choices experienced by the candidate will vary between test instances. When shuffling is in effect, the sequence of choices should be reported as a sequence of choice identifiers using this attribute. Model Primitive Datatype &#x3D; NCName. 
        /// </summary>
        /// <value>When a response variable is bound to an interaction that supports the shuffling of choices, the sequence of choices experienced by the candidate will vary between test instances. When shuffling is in effect, the sequence of choices should be reported as a sequence of choice identifiers using this attribute. Model Primitive Datatype &#x3D; NCName. </value>
        [DataMember(Name="choiceSequence")]
        public List<string> ChoiceSequence { get; set; }

        /// <summary>
        /// Gets or Sets CorrectResponse
        /// </summary>
        [DataMember(Name="correctResponse")]
        public CorrectResponseDType CorrectResponse { get; set; }

        /// <summary>
        /// Gets or Sets CandidateResponse
        /// </summary>
        [Required]
        [DataMember(Name="candidateResponse")]
        public CandidateResponseDType CandidateResponse { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResponseVariableDType {\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  Cardinality: ").Append(Cardinality).Append("\n");
            sb.Append("  BaseType: ").Append(BaseType).Append("\n");
            sb.Append("  ChoiceSequence: ").Append(ChoiceSequence).Append("\n");
            sb.Append("  CorrectResponse: ").Append(CorrectResponse).Append("\n");
            sb.Append("  CandidateResponse: ").Append(CandidateResponse).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ResponseVariableDType)obj);
        }

        /// <summary>
        /// Returns true if ResponseVariableDType instances are equal
        /// </summary>
        /// <param name="other">Instance of ResponseVariableDType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResponseVariableDType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Identifier == other.Identifier ||
                    Identifier != null &&
                    Identifier.Equals(other.Identifier)
                ) && 
                (
                    Cardinality == other.Cardinality ||
                    Cardinality != null &&
                    Cardinality.Equals(other.Cardinality)
                ) && 
                (
                    BaseType == other.BaseType ||
                    BaseType != null &&
                    BaseType.Equals(other.BaseType)
                ) && 
                (
                    ChoiceSequence == other.ChoiceSequence ||
                    ChoiceSequence != null &&
                    ChoiceSequence.SequenceEqual(other.ChoiceSequence)
                ) && 
                (
                    CorrectResponse == other.CorrectResponse ||
                    CorrectResponse != null &&
                    CorrectResponse.Equals(other.CorrectResponse)
                ) && 
                (
                    CandidateResponse == other.CandidateResponse ||
                    CandidateResponse != null &&
                    CandidateResponse.Equals(other.CandidateResponse)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Identifier != null)
                    hashCode = hashCode * 59 + Identifier.GetHashCode();
                    if (Cardinality != null)
                    hashCode = hashCode * 59 + Cardinality.GetHashCode();
                    if (BaseType != null)
                    hashCode = hashCode * 59 + BaseType.GetHashCode();
                    if (ChoiceSequence != null)
                    hashCode = hashCode * 59 + ChoiceSequence.GetHashCode();
                    if (CorrectResponse != null)
                    hashCode = hashCode * 59 + CorrectResponse.GetHashCode();
                    if (CandidateResponse != null)
                    hashCode = hashCode * 59 + CandidateResponse.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ResponseVariableDType left, ResponseVariableDType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ResponseVariableDType left, ResponseVariableDType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
