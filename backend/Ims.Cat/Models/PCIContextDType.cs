/*
 * Computer Adaptive Testing (CAT) Service OpenAPI (YAML) Definition
 *
 * The Computer Adaptive Testing (CAT) Service enables a standard way of implementing adaptive testing using Question and Test Interoperability (QTI). This service has been described using the IMS Model Driven Specification development approach, this being the Platform Specific Model (PSM) of the service.
 *
 * OpenAPI spec version: 1.0
 * Contact: lmattson@imsglobal.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Ims.Cat.Models
{ 
    /// <summary>
    /// This is the container for the contextual information that can be supplied for a PCI used within an Item. The contained information is only relevant when there is an &#x27;interactionType&#x27; of &#x27;portableCustomInteraction&#x27;. 
    /// </summary>
    [DataContract]
    public partial class PCIContextDType : IEquatable<PCIContextDType>
    { 
        /// <summary>
        /// This is used alongside an &#x27;interactionType&#x27; value of &#x27;portableCustomInteraction&#x27; to disambiguate which class of PCI is in use as PCIs can vary widely in terms of how they might need to be psychometrically analyzed. This field could potentially also be used to identify which type of a traditional customInteraction is in use by the item. Model Primitive Datatype &#x3D; NormalizedString.
        /// </summary>
        /// <value>This is used alongside an &#x27;interactionType&#x27; value of &#x27;portableCustomInteraction&#x27; to disambiguate which class of PCI is in use as PCIs can vary widely in terms of how they might need to be psychometrically analyzed. This field could potentially also be used to identify which type of a traditional customInteraction is in use by the item. Model Primitive Datatype &#x3D; NormalizedString.</value>
        [DataMember(Name="customTypeIdentifier")]
        public string CustomTypeIdentifier { get; set; }

        /// <summary>
        /// This is used to provide insight into the nature of the PCI e.g. this is a PCI which allows a user to add notes to a musical stave to author some music that might be given a description of &#x27;authoring&#x27;. This information could be used by a psychometrician, etc. as an indication of a similar type of standard interaction. Model Primitive Datatype &#x3D; NormalizedString.
        /// </summary>
        /// <value>This is used to provide insight into the nature of the PCI e.g. this is a PCI which allows a user to add notes to a musical stave to author some music that might be given a description of &#x27;authoring&#x27;. This information could be used by a psychometrician, etc. as an indication of a similar type of standard interaction. Model Primitive Datatype &#x3D; NormalizedString.</value>
        [DataMember(Name="interactionKind")]
        public string InteractionKind { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PCIContextDType {\n");
            sb.Append("  CustomTypeIdentifier: ").Append(CustomTypeIdentifier).Append("\n");
            sb.Append("  InteractionKind: ").Append(InteractionKind).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PCIContextDType)obj);
        }

        /// <summary>
        /// Returns true if PCIContextDType instances are equal
        /// </summary>
        /// <param name="other">Instance of PCIContextDType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PCIContextDType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CustomTypeIdentifier == other.CustomTypeIdentifier ||
                    CustomTypeIdentifier != null &&
                    CustomTypeIdentifier.Equals(other.CustomTypeIdentifier)
                ) && 
                (
                    InteractionKind == other.InteractionKind ||
                    InteractionKind != null &&
                    InteractionKind.Equals(other.InteractionKind)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CustomTypeIdentifier != null)
                    hashCode = hashCode * 59 + CustomTypeIdentifier.GetHashCode();
                    if (InteractionKind != null)
                    hashCode = hashCode * 59 + InteractionKind.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PCIContextDType left, PCIContextDType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PCIContextDType left, PCIContextDType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
