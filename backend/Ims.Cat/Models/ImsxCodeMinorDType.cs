/*
 * Computer Adaptive Testing (CAT) Service OpenAPI (YAML) Definition
 *
 * The Computer Adaptive Testing (CAT) Service enables a standard way of implementing adaptive testing using Question and Test Interoperability (QTI). This service has been described using the IMS Model Driven Specification development approach, this being the Platform Specific Model (PSM) of the service.
 *
 * OpenAPI spec version: 1.0
 * Contact: lmattson@imsglobal.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Ims.Cat.Models
{ 
    /// <summary>
    /// This is the container for the set of code minor status codes reported in the responses from the Service Provider. 
    /// </summary>
    [DataContract]
    public partial class ImsxCodeMinorDType : IEquatable<ImsxCodeMinorDType>
    { 
        /// <summary>
        /// Each reported code minor status code. 
        /// </summary>
        /// <value>Each reported code minor status code. </value>
        [Required]
        [DataMember(Name="imsx_codeMinorField")]
        public List<ImsxCodeMinorFieldDType> ImsxCodeMinorField { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImsxCodeMinorDType {\n");
            sb.Append("  ImsxCodeMinorField: ").Append(ImsxCodeMinorField).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ImsxCodeMinorDType)obj);
        }

        /// <summary>
        /// Returns true if ImsxCodeMinorDType instances are equal
        /// </summary>
        /// <param name="other">Instance of ImsxCodeMinorDType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImsxCodeMinorDType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ImsxCodeMinorField == other.ImsxCodeMinorField ||
                    ImsxCodeMinorField != null &&
                    ImsxCodeMinorField.SequenceEqual(other.ImsxCodeMinorField)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ImsxCodeMinorField != null)
                    hashCode = hashCode * 59 + ImsxCodeMinorField.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ImsxCodeMinorDType left, ImsxCodeMinorDType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ImsxCodeMinorDType left, ImsxCodeMinorDType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
