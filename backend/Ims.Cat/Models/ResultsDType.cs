/*
 * Computer Adaptive Testing (CAT) Service OpenAPI (YAML) Definition
 *
 * The Computer Adaptive Testing (CAT) Service enables a standard way of implementing adaptive testing using Question and Test Interoperability (QTI). This service has been described using the IMS Model Driven Specification development approach, this being the Platform Specific Model (PSM) of the service.
 *
 * OpenAPI spec version: 1.0
 * Contact: lmattson@imsglobal.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Ims.Cat.Models
{ 
    /// <summary>
    /// This is the container for the results that have been accrued by the examinee. These are passed to the CAT Engine to support the selection of the next set of Items. 
    /// </summary>
    [DataContract]
    public partial class ResultsDType : IEquatable<ResultsDType>
    { 
        /// <summary>
        /// Gets or Sets AssessmentResult
        /// </summary>
        [Required]
        [DataMember(Name="assessmentResult")]
        public AssessmentResultDType AssessmentResult { get; set; }

        /// <summary>
        /// The session state information. This is the data that was supplied by the CAT Engine when the session was created or the next set of Items was requested. Model Primitive Datatype &#x3D; NormalizedString.
        /// </summary>
        /// <value>The session state information. This is the data that was supplied by the CAT Engine when the session was created or the next set of Items was requested. Model Primitive Datatype &#x3D; NormalizedString.</value>
        [DataMember(Name="sessionState")]
        public string SessionState { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResultsDType {\n");
            sb.Append("  AssessmentResult: ").Append(AssessmentResult).Append("\n");
            sb.Append("  SessionState: ").Append(SessionState).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ResultsDType)obj);
        }

        /// <summary>
        /// Returns true if ResultsDType instances are equal
        /// </summary>
        /// <param name="other">Instance of ResultsDType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResultsDType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AssessmentResult == other.AssessmentResult ||
                    AssessmentResult != null &&
                    AssessmentResult.Equals(other.AssessmentResult)
                ) && 
                (
                    SessionState == other.SessionState ||
                    SessionState != null &&
                    SessionState.Equals(other.SessionState)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AssessmentResult != null)
                    hashCode = hashCode * 59 + AssessmentResult.GetHashCode();
                    if (SessionState != null)
                    hashCode = hashCode * 59 + SessionState.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ResultsDType left, ResultsDType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ResultsDType left, ResultsDType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
