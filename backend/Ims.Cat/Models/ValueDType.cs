/*
 * Computer Adaptive Testing (CAT) Service OpenAPI (YAML) Definition
 *
 * The Computer Adaptive Testing (CAT) Service enables a standard way of implementing adaptive testing using Question and Test Interoperability (QTI). This service has been described using the IMS Model Driven Specification development approach, this being the Platform Specific Model (PSM) of the service.
 *
 * OpenAPI spec version: 1.0
 * Contact: lmattson@imsglobal.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Ims.Cat.Models
{ 
    /// <summary>
    /// A class that can represent a single value of any baseType in variable declarations and result reports. The base-type is defined by the baseType attribute of the declaration except in the case of variables with record cardinality. 
    /// </summary>
    [DataContract]
    public partial class ValueDType : IEquatable<ValueDType>
    { 
        /// <summary>
        /// This attribute is only used for specifying the field identifier for a value that forms part of a record. Model Primitive Datatype &#x3D; NCName.
        /// </summary>
        /// <value>This attribute is only used for specifying the field identifier for a value that forms part of a record. Model Primitive Datatype &#x3D; NCName.</value>
        [DataMember(Name="fieldIdentifier")]
        public string FieldIdentifier { get; set; }

        /// <summary>
        /// This attribute is only used for specifying the base-type of a value that forms part of a record. 
        /// </summary>
        /// <value>This attribute is only used for specifying the base-type of a value that forms part of a record. </value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum BaseTypeEnum
        {
            /// <summary>
            /// Enum BooleanEnum for boolean
            /// </summary>
            [EnumMember(Value = "boolean")]
            BooleanEnum = 0,
            /// <summary>
            /// Enum DirectedPairEnum for directedPair
            /// </summary>
            [EnumMember(Value = "directedPair")]
            DirectedPairEnum = 1,
            /// <summary>
            /// Enum DurationEnum for duration
            /// </summary>
            [EnumMember(Value = "duration")]
            DurationEnum = 2,
            /// <summary>
            /// Enum FileEnum for file
            /// </summary>
            [EnumMember(Value = "file")]
            FileEnum = 3,
            /// <summary>
            /// Enum FloatEnum for float
            /// </summary>
            [EnumMember(Value = "float")]
            FloatEnum = 4,
            /// <summary>
            /// Enum IdentifierEnum for identifier
            /// </summary>
            [EnumMember(Value = "identifier")]
            IdentifierEnum = 5,
            /// <summary>
            /// Enum IntegerEnum for integer
            /// </summary>
            [EnumMember(Value = "integer")]
            IntegerEnum = 6,
            /// <summary>
            /// Enum PairEnum for pair
            /// </summary>
            [EnumMember(Value = "pair")]
            PairEnum = 7,
            /// <summary>
            /// Enum PointEnum for point
            /// </summary>
            [EnumMember(Value = "point")]
            PointEnum = 8,
            /// <summary>
            /// Enum StringEnum for string
            /// </summary>
            [EnumMember(Value = "string")]
            StringEnum = 9,
            /// <summary>
            /// Enum UriEnum for uri
            /// </summary>
            [EnumMember(Value = "uri")]
            UriEnum = 10        }

        /// <summary>
        /// This attribute is only used for specifying the base-type of a value that forms part of a record. 
        /// </summary>
        /// <value>This attribute is only used for specifying the base-type of a value that forms part of a record. </value>
        [DataMember(Name="baseType")]
        public BaseTypeEnum? BaseType { get; set; }

        /// <summary>
        /// The value being supplied. Model Primitive Datatype &#x3D; NormalizedString.
        /// </summary>
        /// <value>The value being supplied. Model Primitive Datatype &#x3D; NormalizedString.</value>
        [Required]
        [DataMember(Name="value")]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ValueDType {\n");
            sb.Append("  FieldIdentifier: ").Append(FieldIdentifier).Append("\n");
            sb.Append("  BaseType: ").Append(BaseType).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ValueDType)obj);
        }

        /// <summary>
        /// Returns true if ValueDType instances are equal
        /// </summary>
        /// <param name="other">Instance of ValueDType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ValueDType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FieldIdentifier == other.FieldIdentifier ||
                    FieldIdentifier != null &&
                    FieldIdentifier.Equals(other.FieldIdentifier)
                ) && 
                (
                    BaseType == other.BaseType ||
                    BaseType != null &&
                    BaseType.Equals(other.BaseType)
                ) && 
                (
                    Value == other.Value ||
                    Value != null &&
                    Value.Equals(other.Value)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FieldIdentifier != null)
                    hashCode = hashCode * 59 + FieldIdentifier.GetHashCode();
                    if (BaseType != null)
                    hashCode = hashCode * 59 + BaseType.GetHashCode();
                    if (Value != null)
                    hashCode = hashCode * 59 + Value.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ValueDType left, ValueDType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ValueDType left, ValueDType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
