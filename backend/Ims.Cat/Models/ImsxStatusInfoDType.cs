/*
 * Computer Adaptive Testing (CAT) Service OpenAPI (YAML) Definition
 *
 * The Computer Adaptive Testing (CAT) Service enables a standard way of implementing adaptive testing using Question and Test Interoperability (QTI). This service has been described using the IMS Model Driven Specification development approach, this being the Platform Specific Model (PSM) of the service.
 *
 * OpenAPI spec version: 1.0
 * Contact: lmattson@imsglobal.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Ims.Cat.Models
{ 
    /// <summary>
    /// This is the container for the status code and associated information returned within the HTTP messages received from the Service Provider. 
    /// </summary>
    [DataContract]
    public partial class ImsxStatusInfoDType : IEquatable<ImsxStatusInfoDType>
    { 
        /// <summary>
        /// The code major value (from the corresponding enumerated vocabulary). 
        /// </summary>
        /// <value>The code major value (from the corresponding enumerated vocabulary). </value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ImsxCodeMajorEnum
        {
            /// <summary>
            /// Enum SuccessEnum for success
            /// </summary>
            [EnumMember(Value = "success")]
            SuccessEnum = 0,
            /// <summary>
            /// Enum ProcessingEnum for processing
            /// </summary>
            [EnumMember(Value = "processing")]
            ProcessingEnum = 1,
            /// <summary>
            /// Enum FailureEnum for failure
            /// </summary>
            [EnumMember(Value = "failure")]
            FailureEnum = 2,
            /// <summary>
            /// Enum UnsupportedEnum for unsupported
            /// </summary>
            [EnumMember(Value = "unsupported")]
            UnsupportedEnum = 3        }

        /// <summary>
        /// The code major value (from the corresponding enumerated vocabulary). 
        /// </summary>
        /// <value>The code major value (from the corresponding enumerated vocabulary). </value>
        [Required]
        [DataMember(Name="imsx_codeMajor")]
        public ImsxCodeMajorEnum? ImsxCodeMajor { get; set; }

        /// <summary>
        /// The severity value (from the corresponding enumerated vocabulary). 
        /// </summary>
        /// <value>The severity value (from the corresponding enumerated vocabulary). </value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ImsxSeverityEnum
        {
            /// <summary>
            /// Enum StatusEnum for status
            /// </summary>
            [EnumMember(Value = "status")]
            StatusEnum = 0,
            /// <summary>
            /// Enum WarningEnum for warning
            /// </summary>
            [EnumMember(Value = "warning")]
            WarningEnum = 1,
            /// <summary>
            /// Enum ErrorEnum for error
            /// </summary>
            [EnumMember(Value = "error")]
            ErrorEnum = 2        }

        /// <summary>
        /// The severity value (from the corresponding enumerated vocabulary). 
        /// </summary>
        /// <value>The severity value (from the corresponding enumerated vocabulary). </value>
        [Required]
        [DataMember(Name="imsx_severity")]
        public ImsxSeverityEnum? ImsxSeverity { get; set; }

        /// <summary>
        /// A human readable description supplied by the entity creating the status code information. Model Primitive Datatype &#x3D; String.
        /// </summary>
        /// <value>A human readable description supplied by the entity creating the status code information. Model Primitive Datatype &#x3D; String.</value>
        [DataMember(Name="imsx_description")]
        public string ImsxDescription { get; set; }

        /// <summary>
        /// Gets or Sets ImsxCodeMinor
        /// </summary>
        [DataMember(Name="imsx_codeMinor")]
        public ImsxCodeMinorDType ImsxCodeMinor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImsxStatusInfoDType {\n");
            sb.Append("  ImsxCodeMajor: ").Append(ImsxCodeMajor).Append("\n");
            sb.Append("  ImsxSeverity: ").Append(ImsxSeverity).Append("\n");
            sb.Append("  ImsxDescription: ").Append(ImsxDescription).Append("\n");
            sb.Append("  ImsxCodeMinor: ").Append(ImsxCodeMinor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ImsxStatusInfoDType)obj);
        }

        /// <summary>
        /// Returns true if ImsxStatusInfoDType instances are equal
        /// </summary>
        /// <param name="other">Instance of ImsxStatusInfoDType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImsxStatusInfoDType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ImsxCodeMajor == other.ImsxCodeMajor ||
                    ImsxCodeMajor != null &&
                    ImsxCodeMajor.Equals(other.ImsxCodeMajor)
                ) && 
                (
                    ImsxSeverity == other.ImsxSeverity ||
                    ImsxSeverity != null &&
                    ImsxSeverity.Equals(other.ImsxSeverity)
                ) && 
                (
                    ImsxDescription == other.ImsxDescription ||
                    ImsxDescription != null &&
                    ImsxDescription.Equals(other.ImsxDescription)
                ) && 
                (
                    ImsxCodeMinor == other.ImsxCodeMinor ||
                    ImsxCodeMinor != null &&
                    ImsxCodeMinor.Equals(other.ImsxCodeMinor)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ImsxCodeMajor != null)
                    hashCode = hashCode * 59 + ImsxCodeMajor.GetHashCode();
                    if (ImsxSeverity != null)
                    hashCode = hashCode * 59 + ImsxSeverity.GetHashCode();
                    if (ImsxDescription != null)
                    hashCode = hashCode * 59 + ImsxDescription.GetHashCode();
                    if (ImsxCodeMinor != null)
                    hashCode = hashCode * 59 + ImsxCodeMinor.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ImsxStatusInfoDType left, ImsxStatusInfoDType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ImsxStatusInfoDType left, ImsxStatusInfoDType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
