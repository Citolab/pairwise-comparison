/*
 * Computer Adaptive Testing (CAT) Service OpenAPI (YAML) Definition
 *
 * The Computer Adaptive Testing (CAT) Service enables a standard way of implementing adaptive testing using Question and Test Interoperability (QTI). This service has been described using the IMS Model Driven Specification development approach, this being the Platform Specific Model (PSM) of the service.
 *
 * OpenAPI spec version: 1.0
 * Contact: lmattson@imsglobal.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Ims.Cat.Models
{ 
    /// <summary>
    /// The system that creates the result (for example, the test delivery system) should assign a session identifier that it can use to identify the session. 
    /// </summary>
    [DataContract]
    public partial class SessionIdentifierDType : IEquatable<SessionIdentifierDType>
    { 
        /// <summary>
        /// A unique identifier of the system which added this identifier to the result. Model Primitive Datatype &#x3D; AnyURI.
        /// </summary>
        /// <value>A unique identifier of the system which added this identifier to the result. Model Primitive Datatype &#x3D; AnyURI.</value>
        [Required]
        [DataMember(Name="sourceID")]
        public string SourceID { get; set; }

        /// <summary>
        /// The system that creates the report should add a session identifier. Subsequent systems that process the results might use their own identifier for the session and should add this too if the result is exported again for further transport. Model Primitive Datatype &#x3D; NCName.
        /// </summary>
        /// <value>The system that creates the report should add a session identifier. Subsequent systems that process the results might use their own identifier for the session and should add this too if the result is exported again for further transport. Model Primitive Datatype &#x3D; NCName.</value>
        [Required]
        [DataMember(Name="identifier")]
        public string Identifier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SessionIdentifierDType {\n");
            sb.Append("  SourceID: ").Append(SourceID).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SessionIdentifierDType)obj);
        }

        /// <summary>
        /// Returns true if SessionIdentifierDType instances are equal
        /// </summary>
        /// <param name="other">Instance of SessionIdentifierDType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SessionIdentifierDType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SourceID == other.SourceID ||
                    SourceID != null &&
                    SourceID.Equals(other.SourceID)
                ) && 
                (
                    Identifier == other.Identifier ||
                    Identifier != null &&
                    Identifier.Equals(other.Identifier)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SourceID != null)
                    hashCode = hashCode * 59 + SourceID.GetHashCode();
                    if (Identifier != null)
                    hashCode = hashCode * 59 + Identifier.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SessionIdentifierDType left, SessionIdentifierDType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SessionIdentifierDType left, SessionIdentifierDType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
