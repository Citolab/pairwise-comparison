/*
 * Computer Adaptive Testing (CAT) Service OpenAPI (YAML) Definition
 *
 * The Computer Adaptive Testing (CAT) Service enables a standard way of implementing adaptive testing using Question and Test Interoperability (QTI). This service has been described using the IMS Model Driven Specification development approach, this being the Platform Specific Model (PSM) of the service.
 *
 * OpenAPI spec version: 1.0
 * Contact: lmattson@imsglobal.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Ims.Cat.Models
{ 
    /// <summary>
    /// This is the container for a single code minor status code. 
    /// </summary>
    [DataContract]
    public partial class ImsxCodeMinorFieldDType : IEquatable<ImsxCodeMinorFieldDType>
    { 
        /// <summary>
        /// This should contain the identity of the system that has produced the code minor status code report. Model Primitive Datatype &#x3D; NormalizedString.
        /// </summary>
        /// <value>This should contain the identity of the system that has produced the code minor status code report. Model Primitive Datatype &#x3D; NormalizedString.</value>
        [Required]
        [DataMember(Name="imsx_codeMinorFieldName")]
        public string ImsxCodeMinorFieldName { get; set; }

        /// <summary>
        /// The code minor status code (this is a value from the corresponding enumerated vocabulary). 
        /// </summary>
        /// <value>The code minor status code (this is a value from the corresponding enumerated vocabulary). </value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ImsxCodeMinorFieldValueEnum
        {
            /// <summary>
            /// Enum FullsuccessEnum for fullsuccess
            /// </summary>
            [EnumMember(Value = "fullsuccess")]
            FullsuccessEnum = 0,
            /// <summary>
            /// Enum ForbiddenEnum for forbidden
            /// </summary>
            [EnumMember(Value = "forbidden")]
            ForbiddenEnum = 1,
            /// <summary>
            /// Enum InvaliddataEnum for invaliddata
            /// </summary>
            [EnumMember(Value = "invaliddata")]
            InvaliddataEnum = 2,
            /// <summary>
            /// Enum UnauthorisedrequestEnum for unauthorisedrequest
            /// </summary>
            [EnumMember(Value = "unauthorisedrequest")]
            UnauthorisedrequestEnum = 3,
            /// <summary>
            /// Enum InternalServerErrorEnum for internal_server_error
            /// </summary>
            [EnumMember(Value = "internal_server_error")]
            InternalServerErrorEnum = 4,
            /// <summary>
            /// Enum ServerBusyEnum for server_busy
            /// </summary>
            [EnumMember(Value = "server_busy")]
            ServerBusyEnum = 5,
            /// <summary>
            /// Enum UnknownobjectEnum for unknownobject
            /// </summary>
            [EnumMember(Value = "unknownobject")]
            UnknownobjectEnum = 6        }

        /// <summary>
        /// The code minor status code (this is a value from the corresponding enumerated vocabulary). 
        /// </summary>
        /// <value>The code minor status code (this is a value from the corresponding enumerated vocabulary). </value>
        [Required]
        [DataMember(Name="imsx_codeMinorFieldValue")]
        public ImsxCodeMinorFieldValueEnum? ImsxCodeMinorFieldValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImsxCodeMinorFieldDType {\n");
            sb.Append("  ImsxCodeMinorFieldName: ").Append(ImsxCodeMinorFieldName).Append("\n");
            sb.Append("  ImsxCodeMinorFieldValue: ").Append(ImsxCodeMinorFieldValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ImsxCodeMinorFieldDType)obj);
        }

        /// <summary>
        /// Returns true if ImsxCodeMinorFieldDType instances are equal
        /// </summary>
        /// <param name="other">Instance of ImsxCodeMinorFieldDType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImsxCodeMinorFieldDType other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ImsxCodeMinorFieldName == other.ImsxCodeMinorFieldName ||
                    ImsxCodeMinorFieldName != null &&
                    ImsxCodeMinorFieldName.Equals(other.ImsxCodeMinorFieldName)
                ) && 
                (
                    ImsxCodeMinorFieldValue == other.ImsxCodeMinorFieldValue ||
                    ImsxCodeMinorFieldValue != null &&
                    ImsxCodeMinorFieldValue.Equals(other.ImsxCodeMinorFieldValue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ImsxCodeMinorFieldName != null)
                    hashCode = hashCode * 59 + ImsxCodeMinorFieldName.GetHashCode();
                    if (ImsxCodeMinorFieldValue != null)
                    hashCode = hashCode * 59 + ImsxCodeMinorFieldValue.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ImsxCodeMinorFieldDType left, ImsxCodeMinorFieldDType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ImsxCodeMinorFieldDType left, ImsxCodeMinorFieldDType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
